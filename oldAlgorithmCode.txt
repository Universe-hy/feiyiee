/* ---------------------------------


----------------------------------------------------------------------------------

#include<iostream>
#include <stdlib.h>
#include<string>
#include<map>
using namespace std;

int ve91[22][22], f91[1048580][22];

int AcWing91() {
	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
		for (int q = 0; q < n; q++)
			cin >> ve[i][q];
	//q 为取数状态
	for (int q = 3; q < (1 << n); q += 2)
	{
		//以i 为结尾
		for (int i = 0; i < n; i++) {
			f[q][i] = 1000000000;
			if (i && (q & (1 << i)))
			{
				//j 为上一个结尾
				for (int j = 0; j < n; j++)
				{
					if ((q & (1 << j)) && j != i)
						f[q][i] = min(f[q][i], f[q ^ (1 << i)][j] + ve[j][i]);
				}
			}
		}
	}

	//cout << f[(1 << n) - 1][n - 1];
	return 0;
}

----------------------------------------------------------------------------------


long long int f285[12][1<<12];
int n, m;
int cheak285(int a) {
	int fig = 0;
	for (int i = 0; i < m; i++) {
		if (a & 1) {
			if (fig & 1)return 0;
			fig = 0;
		}else fig++;
		a >>= 1;
	}
	return !(fig & 1);
}

int AcWing285() {
	while(cin>>n>>m,n||m)
	{
		if (n == 1) {
			cout << !(m &1 ) << endl;
		}
		else {
			for (int i = 0; i < (1 << m); i++)
				f[1][i]= cheak(i);

			for (int i = 2; i < n; i++) {
				for (int q = 0; q < (1 << m); q++) {
					f[i][q] = 0;
					for (int w = 0; w < (1 << m); w++) {
						if (!(q & w) && f[1][q | w]) {
							f[i][q] += f[i - 1][w];
						}
					}
				}
			}
			long long int ans = 0;
			for (int w = 0; w < (1 << m); w++)
				if(w&& f[1][w])
					ans += f[n - 1][w];
			cout << ans << endl;
		}
	}
}

----------------------------------------------------------------------------------


int count338(int a,int n) {
    int res = 0;
    for (int i=1;a/i;i*=10){
        int q = a / (i * 10), h = a % i, d = (a % (i * 10)) / i;
        if (n == 0 && q == 0)break;
        res += n ? q * i : (q - 1) * i;
        if (n == d) res += h+1;
        else if (n < d)  res += i ;
    }
    return res;
}

int AcWing338()
{
    int a = 1, b = 1;
    while (scanf("%d %d", &a, &b) != -1 && (a || b)) {
        for (int i = 0; i < 10; i++) 
            printf("%d ", a<b?count(b,i)-count(a-1,i): count(a, i) - count(b - 1, i));
        printf("\n");
    }

    return 0;
}

----------------------------------------------------------------------------------


const int N = 6010;
int v[N],f[N],g[N],rs1[N],rs2[N];
queue<int> hod;

int AcWing285() {
	int n, a, b;
	scanf("%d", &n);
	for (int i = 1; i <= n; i++)
		scanf("%d", &v[i]);
	for (int i = 1; i < n; i++) {
		scanf("%d %d", &a, &b);
		f[a] = b; g[b]++;
	}

	for (int i = 1; i <=n; i++)
		if (!g[i]) hod.push(i);

	while (1) {
		a = hod.front();
		rs1[a] += v[a];
		if (f[a] == 0)break;
		hod.pop();
		rs1[f[a]] += rs2[a];
		rs2[f[a]] += max(rs1[a],rs2[a]);
		g[f[a]]--;
		if(g[f[a]]==0)
			hod.push(f[a]);
	}
	cout << max(rs1[hod.front()],rs2[hod.front()]);
	return 0;
}

--------------------------------分界线-----------------------------------------------


const int N = 310;
int v[N][N], f[N][N], rs[N][N];
int r, c;
int dfs(int a, int b) {
	if (rs[a][b])
		return rs[a][b];

	if (a - 1 >= 0 && v[a - 1][b] < v[a][b])
		rs[a][b] = max(rs[a][b], dfs(a - 1, b));
	if (b - 1 >= 0 && v[a][b - 1] < v[a][b])
		rs[a][b] = max(rs[a][b], dfs(a, b - 1));
	if (a + 1 < r && v[a + 1][b] < v[a][b])
		rs[a][b] = max(rs[a][b], dfs(a + 1, b));
	if (b + 1 < c && v[a][b + 1] < v[a][b])
		rs[a][b] = max(rs[a][b], dfs(a, b + 1));
	rs[a][b]++;
	return rs[a][b];
}

int main() {
	scanf("%d %d", &r, &c);
	for (int i = 0; i < r; i++)
		for (int q = 0; q < c; q++)
		{
			scanf("%d", &v[i][q]);
		}
	int ans = 0;
	for (int i = 0; i < r; i++)
		for (int q = 0; q < c; q++)
			ans = max(ans, dfs(i, q));
	cout << ans;

	return 0;
}

--------------------------------分界线-----------------------------------------------

---------------------   */